{
	"info": {
		"_postman_id": "03bfcca9-6a64-4629-a110-054447bc4f78",
		"name": "workforce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Offices",
			"item": [
				{
					"name": "List District Offices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/offices",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Groups",
			"item": [
				{
					"name": "List Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/groups",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Groups by Office",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.collectionVariables.unset('office_symbol');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/offices/:office_symbol/groups",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								":office_symbol",
								"groups"
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "LRN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Office Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// set variables",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set('group_slug', jsonData.slug);",
									"",
									"pm.test(\"response is created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response json should contain one object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'office_id', 'uid', 'office_symbol', 'name', 'slug', 'last_verified']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Water Water Everywhere\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/offices/:office_symbol/groups",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								":office_symbol",
								"groups"
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "LRN"
								}
							]
						}
					},
					"response": [
						{
							"name": "Group Already Exists",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Water Water Everywhere\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/offices/:office_symbol/groups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"offices",
										":office_symbol",
										"groups"
									],
									"variable": [
										{
											"key": "office_symbol",
											"value": "LRN"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n    \"error\":{\n        \"name\": \"instanceFoundError\",\n        \"message\": \"ERROR: duplicate key value violates unique constraint \\\"unique_office_slug\\\" (SQLSTATE 23505)\",\n        \"details\": {\"id\": \"UUID\"}\n    }\n}"
						}
					]
				},
				{
					"name": "Update Office Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response json should contain one object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'office_id', 'uid', 'office_symbol', 'name', 'slug', 'last_verified']);",
									"});",
									"",
									"// skip this test with pm.test.skip",
									"pm.test('\"office_symbol\" and \"group_slug\" variables should be present', function () {",
									"    pm.expect(pm.variables.get('office_symbol')).to.be.a('string');",
									"    pm.expect(pm.variables.get('group_slug')).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"NEW NAME\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/offices/{{office_symbol}}/groups/{{group_slug}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								"{{office_symbol}}",
								"groups",
								"{{group_slug}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Office Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test.skip(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"// skipping",
									"pm.test.skip(\"response json should contain one collection\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// skipping",
									"pm.test.skip(\"response json should return collection details\", function () {",
									"    pm.expect(pm.response.json())",
									"        to.include.keys(['id']);",
									"});",
									"",
									"pm.collectionVariables.unset('office_symbol');",
									"pm.collectionVariables.unset('group_slug');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/offices/{{office_symbol}}/groups/{{group_slug}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								"{{office_symbol}}",
								"groups",
								"{{group_slug}}"
							]
						}
					},
					"response": [
						{
							"name": "Group Deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/offices/{{office_symbol}}/groups/{{group_slug}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"offices",
										"{{office_symbol}}",
										"groups",
										"{{group_slug}}"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n    \"id\": \"UUID\"\n}"
						},
						{
							"name": "Group Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/offices/{{office_symbol}}/groups/{{group_slug}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"offices",
										"{{office_symbol}}",
										"groups",
										"{{group_slug}}"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"\",\n        \"details\": {\n            \"id\": \"UUID\"\n        }\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Positions",
			"item": [
				{
					"name": "Get Position By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/position/:position_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"position",
								":position_id"
							],
							"variable": [
								{
									"key": "position_id",
									"value": "6ce9f21b-3722-4fdf-b72c-a028d7201ec6",
									"description": "UUID for the position"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Office Positions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.collectionVariables.unset('office_symbol');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/offices/:office_symbol/positions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								":office_symbol",
								"positions"
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "LRN",
									"description": "District code"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Position By Office and Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test.skip(\"response json should return object details\", function () {",
									"    _.each(pm.response.json(), (item) => {",
									"        pm.expect(item).to.include",
									"            .keys(['id', 'office_symbol', 'group_slug', 'title', 'pay_plan',",
									"                'grade', 'is_active', 'is_supervisor', 'is_allocated',",
									"                'occupation_code', 'occupation_name', 'current_occupancy']);",
									"    });",
									"});",
									"",
									"pm.test('\"office_symbol\" and \"group_slug\" variables should be present', function(){",
									"    pm.expect(pm.variables.get('office_symbol')).to.be.a('string')",
									"    pm.expect(pm.variables.get('group_slug')).to.be.a('string')",
									"});",
									"",
									"pm.collectionVariables.unset('group_slug');",
									"pm.collectionVariables.unset('office_symbol');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/offices/:office_symbol/:group_slug/positions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								":office_symbol",
								":group_slug",
								"positions"
							],
							"query": [
								{
									"key": "active",
									"value": "false",
									"description": "Query to get active positions or not active positions",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "LRN",
									"description": "District code"
								},
								{
									"key": "group_slug",
									"value": "nashville-district"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Office Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// set variables",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"position_id\", jsonData.id);",
									"",
									"pm.test(\"response is created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response json should contain one object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'office_symbol', 'group_slug', 'title', 'pay_plan', 'grade',",
									"        'is_active', 'is_supervisor', 'is_allocated',",
									"        'occupation_code', 'occupation_name', 'current_occupancy']);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"group_slug\": \"nashville-district\",\n    \"title\": \"Super Trooper Engineer\",\n    \"pay_plan\": \"GS\",\n    \"grade\": 15,\n    \"is_supervisor\": false,\n    \"is_active\": false,\n    \"occupation_code\": \"0810\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/offices/:office_symbol/positions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								":office_symbol",
								"positions"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "LRN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Office Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response json should contain one object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'office_symbol', 'group_slug', 'title', 'pay_plan', 'grade',",
									"        'is_active', 'is_supervisor', 'is_allocated',",
									"        'occupation_code', 'occupation_name', 'current_occupancy']);",
									"});",
									"",
									"// skip this test with pm.test.skip",
									"pm.test('\"office_symbol\" and \"group_slug\" variables should be present', function () {",
									"    pm.expect(pm.variables.get('office_symbol')).to.be.a('string');",
									"    pm.expect(pm.variables.get('position_id')).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Super Trooper\",\n    \"group_slug\": \"nashville-district\",\n    \"pay_plan\": \"GS\",\n    \"grade\": 5,\n    \"is_active\": false,\n    \"is_supervisor\": false,\n    \"is_allocated\": false,\n    \"occupation_code\": \"0810\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/offices/{{office_symbol}}/positions/{{position_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								"{{office_symbol}}",
								"positions",
								"{{position_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Office Position",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test.skip(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"// skipping",
									"pm.test.skip(\"response json should contain one collection\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// skipping",
									"pm.test.skip(\"response json should return collection details\", function () {",
									"    pm.expect(pm.response.json())",
									"        to.include.keys(['id']);",
									"});",
									"",
									"pm.collectionVariables.unset('office_symbol');",
									"pm.collectionVariables.unset('position_id');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/offices/{{office_symbol}}/positions/{{position_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								"{{office_symbol}}",
								"positions",
								"{{position_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Delete Office Position",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/offices/{{office_symbol}}/positions/{{position_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"offices",
										"{{office_symbol}}",
										"positions",
										"{{position_id}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n    \"position\":{\n        \"id\": \"UUID\"\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Occupancy",
			"item": [
				{
					"name": "Get Occupancy By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'position_id', 'title', 'start_date', 'end_date',",
									"            'service_start_date', 'service_end_date', 'dob', 'credentials']);",
									"});",
									"",
									"pm.collectionVariables.unset('occupancy_id');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/occupancy/:occupancy_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"occupancy",
								":occupancy_id"
							],
							"variable": [
								{
									"key": "occupancy_id",
									"value": "a119ad8a-2b94-4d8f-a3c9-b985904e6f69"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Occupancy by Office",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    _.each(pm.response.json(), (item) => {",
									"        pm.expect(item).to.include",
									"            .keys(['id', 'position_id', 'title', 'start_date', 'end_date',",
									"                'service_start_date', 'service_end_date', 'dob', 'credentials']);",
									"    });",
									"});",
									"",
									"pm.test('\"office_symbol\" variable should be present', function(){",
									"    pm.expect(pm.variables.get('office_symbol')).to.be.a('string')",
									"});",
									"",
									"pm.collectionVariables.unset('office_symbol');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/offices/:office_symbol/occupancy",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								":office_symbol",
								"occupancy"
							],
							"query": [
								{
									"key": "active",
									"value": "true",
									"description": "Query to get active positions or not active positions",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "LRN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Occupancy by Office and Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    _.each(pm.response.json(), (item) => {",
									"        pm.expect(item).to.include",
									"            .keys(['id', 'position_id', 'title', 'start_date', 'end_date',",
									"                'service_start_date', 'service_end_date', 'dob', 'credentials']);",
									"    });",
									"});",
									"",
									"pm.test('\"office_symbol\"  and \"group_slug\" variables should be present', function(){",
									"    pm.expect(pm.variables.get('office_symbol')).to.be.a('string')",
									"    pm.expect(pm.variables.get('group_slug')).to.be.a('string')",
									"});",
									"",
									"pm.collectionVariables.unset('office_symbol');",
									"pm.collectionVariables.unset('group_slug');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/offices/:office_symbol/:group_slug/occupancy",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								":office_symbol",
								":group_slug",
								"occupancy"
							],
							"query": [
								{
									"key": "active",
									"value": "true",
									"description": "Query to get active positions or not active positions",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "LRN"
								},
								{
									"key": "group_slug",
									"value": "nashville-district"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Occupancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// set variables",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"occupancy_id\", jsonData.id);",
									"",
									"pm.test(\"response is created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response json should contain one object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'position_id', 'title', 'start_date', 'end_date',",
									"                'service_start_date', 'service_end_date', 'dob', 'credentials']);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"position_id\": \"964d3ba8-14a1-42d2-a6b7-25be6a853101\",\n    \"title\": \"New Position Title\",\n    \"start_date\": \"2005-10-20T00:00:00Z\",\n    \"end_date\": null,\n    \"service_start_date\": \"2001-10-20T00:00:00Z\",\n    \"service_end_date\": null,\n    \"dob\": \"1990-03-01T00:00:00Z\",\n    \"credentials\": [\n        {\n            \"abbrev\": \"PE\"\n        },\n        {\n            \"abbrev\": \"PH\"\n        },\n        {\n            \"abbrev\": \"MS\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/offices/:office_symbol/occupancy",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								":office_symbol",
								"occupancy"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "LRN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Occupancy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response json should contain one object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'position_id', 'title', 'start_date', 'end_date',",
									"                'service_start_date', 'service_end_date', 'dob', 'credentials']);",
									"});",
									"",
									"// skip this test with pm.test.skip",
									"pm.test('\"office_symbol\" and \"group_slug\" variables should be present', function () {",
									"    pm.expect(pm.variables.get('office_symbol')).to.be.a('string');",
									"    pm.expect(pm.variables.get('occupancy_id')).to.be.a('string');",
									"});",
									"",
									"pm.collectionVariables.unset('office_symbol');",
									"pm.collectionVariables.unset('occupancy_id');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"position_id\": \"964d3ba8-14a1-42d2-a6b7-25be6a853101\",\n    \"title\": \"MY NEW TITLE\",\n    \"start_date\": \"2005-10-20T00:00:00Z\",\n    \"end_date\": null,\n    \"service_start_date\": \"2001-10-20T00:00:00Z\",\n    \"service_end_date\": null,\n    \"dob\": \"1990-03-01T00:00:00Z\",\n    \"credentials\": [\n        {\n            \"abbrev\": \"PE\"\n        },\n        {\n            \"abbrev\": \"MS\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/offices/{{office_symbol}}/occupancy/{{occupancy_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"offices",
								"{{office_symbol}}",
								"occupancy",
								"{{occupancy_id}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Credentials",
			"item": [
				{
					"name": "Get Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    _.each(pm.response.json(), (item) => {",
									"        pm.expect(item).to.include",
									"            .keys(['abbrev', 'name', 'type']);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/credentials",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"credentials"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Role Requests",
			"item": [
				{
					"name": "List RoleRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    _.each(pm.response.json(), (item) => {",
									"        pm.expect(item).to.include",
									"            .keys(['id', 'sub', 'office_symbol', 'status', 'request_date', 'response_date', 'responder']);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_application_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/role_requests",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"role_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "List My RoleRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    _.each(pm.response.json(), (item) => {",
									"        pm.expect(item).to.include",
									"            .keys(['id', 'sub', 'office_symbol', 'status', 'request_date', 'response_date', 'responder']);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_mvp_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/my_role_requests",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"my_role_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RoleRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// set variables",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"request_id\", jsonData.id);",
									"",
									"pm.test(\"response is created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response json should contain one object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'sub', 'office_symbol', 'status', 'request_date', 'response_date', 'responder']);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set url variable to collection variable",
									"pm.request.url.variables.each(item => {",
									"    pm.collectionVariables.set(item.key, item.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_mvp_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/role_requests/:office_symbol",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"role_requests",
								":office_symbol"
							],
							"variable": [
								{
									"key": "office_symbol",
									"value": "lrn"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve RoleRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'sub', 'office_symbol', 'status', 'request_date', 'response_date', 'responder']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_application_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/role_requests/{{request_id}}/approve",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"role_requests",
								"{{request_id}}",
								"approve"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deny RoleRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response json data should not have errors\", function () {",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.not.have.jsonBody('error');",
									"});",
									"",
									"pm.test(\"response to be json should be an object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test(\"response json should return object details\", function () {",
									"    pm.expect(pm.response.json()).to.include",
									"        .keys(['id', 'sub', 'office_symbol', 'status', 'request_date', 'response_date', 'responder']);",
									"});",
									"",
									"pm.collectionVariables.unset('office_symbol');",
									"pm.collectionVariables.unset('request_id');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_application_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/role_requests/{{request_id}}/deny",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"role_requests",
								"{{request_id}}",
								"deny"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_application_admin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.environment.get(\"base_url\") == null){",
					"    pm.environment.set(\"base_url\", \"localhost\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt_application_admin",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJZYVZSTS0xVmp1LWR2N2NEZ0k5ZnJkNVRtZFl1RU5QbWRoV0NaZU1TWmMifQ.eyJleHAiOjE4Mzk1MDU1MzUsImlhdCI6MTYzOTUwNTIzNSwianRpIjoiOTBmN2YzYmYtZTkzNC00NWM2LTg1OGUtNzVjMGM2NDdkZTNkIiwiaXNzIjoiaHR0cHM6Ly9tb2NrLXNlcnZlciIsImF1ZCI6WyJjdW11bHVzIiwid29ya2ZvcmNlIiwiYWNjb3VudCJdLCJzdWIiOiI5MmUxMGQ5My1iNDU0LTQ0Y2ItOWM3Zi01ZGVhZjBkMTZmMTUiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ3b3JrZm9yY2UiLCJzZXNzaW9uX3N0YXRlIjoiYzI4YTMzZmUtNzM4MC00OTI4LWFkNDYtN2JmZTFiY2M2OTVkIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXdhdGVyIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7Indvcmtmb3JjZSI6eyJyb2xlcyI6WyJhcHBsaWNhdGlvbi5hZG1pbiJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSIsInByZWZlcnJlZF91c2VybmFtZSI6Indvcmtmb3JjZS5hZG1pbiIsImdpdmVuX25hbWUiOiIiLCJmYW1pbHlfbmFtZSI6IiJ9.Aip3doJZ13paloCD-tNY88zuMpkWbKYTASrTXITcvTg",
			"type": "string"
		},
		{
			"key": "jwt_lrn_admin",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJZYVZSTS0xVmp1LWR2N2NEZ0k5ZnJkNVRtZFl1RU5QbWRoV0NaZU1TWmMifQ.eyJleHAiOjE4Mzk1MDU1MzUsImlhdCI6MTYzOTUwNTIzNSwianRpIjoiZTUzMzYyZDgtYmFkOC00M2JhLThmODItYWExNzNmMjk5M2Y0IiwiaXNzIjoiaHR0cHM6Ly9tb2NrLXNlcnZlciIsImF1ZCI6WyJjdW11bHVzIiwid29ya2ZvcmNlIiwiYWNjb3VudCJdLCJzdWIiOiJmZjJkZDZhMS03MmE0LTQ3OTktOTE2OC1lNjY0MWIwMDI2NjQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ3b3JrZm9yY2UiLCJzZXNzaW9uX3N0YXRlIjoiNDgxMGUxYzQtNDhhMS00Njg4LTk2MjYtNGFhZDVlOGIwYzNlIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXdhdGVyIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7Indvcmtmb3JjZSI6eyJyb2xlcyI6WyJscm4uYWRtaW4iXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJscm4uYWRtaW4iLCJnaXZlbl9uYW1lIjoiIiwiZmFtaWx5X25hbWUiOiIifQ.RHdgX1w-p7LAAMQHxF0XJu94-zEfYKPCBTfMtpea2gU",
			"type": "string"
		},
		{
			"key": "jwt_mvp_admin",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImJZYVZSTS0xVmp1LWR2N2NEZ0k5ZnJkNVRtZFl1RU5QbWRoV0NaZU1TWmMifQ.eyJleHAiOjE4Mzk1MDU1MzUsImlhdCI6MTYzOTUwNTIzNSwianRpIjoiMDQ5YzIyMDctNzdhMC00ODk1LWJiYjctNTE3NWY1ZjVjZTIwIiwiaXNzIjoiaHR0cHM6Ly9tb2NrLXNlcnZlciIsImF1ZCI6WyJjdW11bHVzIiwid29ya2ZvcmNlIiwiYWNjb3VudCJdLCJzdWIiOiI2YjRkMTkwMS1kZjIwLTRjNzMtYTI4MS05YjllOGU0OWJiNmIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ3b3JrZm9yY2UiLCJzZXNzaW9uX3N0YXRlIjoiODg1NzY3ZTEtNGU2Ni00ZmQ0LWEyNmItN2E5OWY0NjVlMTFhIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXdhdGVyIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7Indvcmtmb3JjZSI6eyJyb2xlcyI6WyJtdnAuYWRtaW4iXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJtdnAuYWRtaW4iLCJnaXZlbl9uYW1lIjoiIiwiZmFtaWx5X25hbWUiOiIifQ.5561G-u8VOvVrDk7nAlQ5Coiiqz51XwUOPHpXukpHGo",
			"type": "string"
		}
	]
}